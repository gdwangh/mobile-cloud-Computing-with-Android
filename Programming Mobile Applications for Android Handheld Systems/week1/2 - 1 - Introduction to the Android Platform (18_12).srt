1
00:00:00,104 --> 00:00:10,104
[MUSIC]

2
00:00:13,664 --> 00:00:16,710
Today I'm going to introduce
you to the Android Platform.

3
00:00:16,710 --> 00:00:19,990
I'll start by giving you an overview
of the Android Platform, and

4
00:00:19,990 --> 00:00:22,190
the components that make it up.

5
00:00:22,190 --> 00:00:24,640
And then I'll present each
of these components and

6
00:00:24,640 --> 00:00:29,330
discuss how they help developers
build great mobile applications.

7
00:00:29,330 --> 00:00:30,130
So let's get started.

8
00:00:32,660 --> 00:00:37,520
The Android platform is a software stack,
and it was designed primarily, but

9
00:00:37,520 --> 00:00:43,770
not exclusively, to support mobile
devices such as phones and tablets.

10
00:00:43,770 --> 00:00:47,370
And this stack has several layers,
going all the way from low-level operating

11
00:00:47,370 --> 00:00:53,040
system services that manage the device
itself, up to sample applications,

12
00:00:53,040 --> 00:00:57,890
things like the phone dialer, the contacts
database, and the web browser.

13
00:00:57,890 --> 00:01:01,080
Android also comes with
a software developers kit, or

14
00:01:01,080 --> 00:01:05,090
SDK, which is used to create
Android applications.

15
00:01:05,090 --> 00:01:09,330
And finally, there's tons of
documentation, tutorials, blogs, and

16
00:01:09,330 --> 00:01:13,690
examples that you can use to improve
your own understanding of Android, and

17
00:01:13,690 --> 00:01:17,040
I encourage you to take advantage
of all these resources.

18
00:01:20,080 --> 00:01:23,530
Now this graphic represents
the Android software stack.

19
00:01:23,530 --> 00:01:26,239
And as you can see,
it's organized into several layers.

20
00:01:27,530 --> 00:01:31,080
At the bottom there's
the Linux kernel layer.

21
00:01:31,080 --> 00:01:36,120
Above that, there are system libraries and
the Android run time system.

22
00:01:36,120 --> 00:01:39,850
Above that, there's a rich
application framework player to

23
00:01:39,850 --> 00:01:42,930
support the development
of new applications,.

24
00:01:42,930 --> 00:01:47,080
And at the very top, Android provides
some standard applications, again,

25
00:01:47,080 --> 00:01:51,560
things like the phone dialer, the web
browser, and the contacts database.

26
00:01:51,560 --> 00:01:54,240
So let's look at each of
these layers in detail,

27
00:01:54,240 --> 00:01:55,870
starting with the Linux kernel layer.

28
00:01:58,150 --> 00:02:02,930
The Linux kernel layer is the lowest layer
of software in the Android platform.

29
00:02:02,930 --> 00:02:09,630
This layer provides the core services that
any Android computing device will rely on.

30
00:02:09,630 --> 00:02:10,950
Android's Linux kernel,

31
00:02:10,950 --> 00:02:16,140
just like any Linux kernel, provides
generic operating system services.

32
00:02:16,140 --> 00:02:19,920
For example,
it provides a permissions architecture so

33
00:02:19,920 --> 00:02:22,300
that you can restrict access to data and

34
00:02:22,300 --> 00:02:27,060
resources to only those processes
that have the proper authorizations.

35
00:02:27,060 --> 00:02:31,250
It supports memory and process management,
so that multiple processes can

36
00:02:31,250 --> 00:02:34,290
run simultaneously without
interfering with each other.

37
00:02:35,440 --> 00:02:40,445
It handles low-level details of file and
network I/O.

38
00:02:40,445 --> 00:02:44,660
And it also allows device drivers to
be plugged in so that Android can

39
00:02:44,660 --> 00:02:48,550
communicate with a wide range of
low-level hardware components that

40
00:02:48,550 --> 00:02:53,190
are often coupled to computing devices,
things like memory and radios and cameras.

41
00:02:55,480 --> 00:02:59,290
In addition to the common services
supported by any Linux kernel,

42
00:02:59,290 --> 00:03:04,110
Android's Linux kernel also includes
several Android-specific components.

43
00:03:04,110 --> 00:03:07,421
For example,
Android's Linux kernel includes its own

44
00:03:07,421 --> 00:03:12,151
power management services because mobile
devices often run on battery power.

45
00:03:12,151 --> 00:03:14,426
It provides its own memory sharing and

46
00:03:14,426 --> 00:03:19,422
memory management features, because
mobile devices often have limited memory.

47
00:03:19,422 --> 00:03:24,910
And Android's Linux kernel also includes
its own inter-process communication

48
00:03:24,910 --> 00:03:29,660
mechanism called the binder, which allows
multiple processes to share data and

49
00:03:29,660 --> 00:03:32,790
services in sophisticated ways.

50
00:03:32,790 --> 00:03:36,220
And of course, this is just a few
of the Android-specific features.

51
00:03:36,220 --> 00:03:37,500
There are many others as well.

52
00:03:39,920 --> 00:03:44,220
Next layer up includes
a variety of system libraries.

53
00:03:44,220 --> 00:03:46,638
These libraries are typically
written in C and

54
00:03:46,638 --> 00:03:51,930
C++, and for that reason they are often
referred to as the native libraries.

55
00:03:51,930 --> 00:03:55,185
And these native libraries
handle a lot of the core,

56
00:03:55,185 --> 00:03:58,100
performance-sensitive activities
on your device,

57
00:03:58,100 --> 00:04:02,040
things like quickly rendering web
pages and updating the display.

58
00:04:03,290 --> 00:04:07,800
And for example, Android has its own
System C Library, which implements

59
00:04:07,800 --> 00:04:12,980
the standard OS system calls, which do
things like process and thread creation,

60
00:04:12,980 --> 00:04:17,780
mathematical computations,
memory allocation, and much more.

61
00:04:17,780 --> 00:04:21,430
There's the Surface Manager,
for updating the display.

62
00:04:21,430 --> 00:04:25,780
A media framework, for
playing back audio and video files.

63
00:04:25,780 --> 00:04:28,689
Webkit, for rendering and
displaying web pages.

64
00:04:29,710 --> 00:04:33,130
OpenGL for high performance graphics.

65
00:04:33,130 --> 00:04:38,570
And SQLite for
managing in-memory relational databases.

66
00:04:38,570 --> 00:04:43,590
In addition to the system libraries, this
layer also includes the Android Runtime,

67
00:04:43,590 --> 00:04:46,699
which supports writing and
running Android applications.

68
00:04:48,330 --> 00:04:51,040
And there are two components in
the Android Runtime that we'll talk

69
00:04:51,040 --> 00:04:56,490
about today, the core Java libraries and
the Dalvik Virtual Machine.

70
00:04:56,490 --> 00:04:58,680
Let's talk about each
of those one at a time.

71
00:05:00,140 --> 00:05:03,680
Now first, Android applications
are typically written in

72
00:05:03,680 --> 00:05:05,119
the Java programming language.

73
00:05:06,410 --> 00:05:09,020
And to make it easier
to write applications,

74
00:05:09,020 --> 00:05:13,620
Android provides a number of
reusable Java building blocks.

75
00:05:13,620 --> 00:05:19,570
For instance, the Java and Java X, or Java
extensions packages include basic software

76
00:05:19,570 --> 00:05:24,485
for things like common data structures,
concurrency mechanisms and file I/O.

77
00:05:25,650 --> 00:05:29,640
The Android packages have software
that's specific to the life cycle of

78
00:05:29,640 --> 00:05:31,310
mobile applications.

79
00:05:31,310 --> 00:05:35,700
The ORG packages support various
internet or web operations.

80
00:05:35,700 --> 00:05:39,320
And the JUnit packages support
the unit testing of applications.

81
00:05:40,330 --> 00:05:43,580
The second part of the Android Runtime
is the Dalvik Virtual Machine.

82
00:05:44,810 --> 00:05:49,020
The Dalvik virtual machine is
the software that actually executes

83
00:05:49,020 --> 00:05:51,010
Android applications.

84
00:05:51,010 --> 00:05:55,269
Now as I just told you, Android
applications are typically written in

85
00:05:55,269 --> 00:06:00,035
Java, so you might have assumed that
since they're written in Java they would

86
00:06:00,035 --> 00:06:05,112
probably run on a standard Java virtual
machine, but in fact that's not the case.

87
00:06:05,112 --> 00:06:09,415
What typically happens is that
developers first write their

88
00:06:09,415 --> 00:06:13,520
applications in the Java
programming language.

89
00:06:13,520 --> 00:06:16,710
Then a Java compiler will
compile the Java source code

90
00:06:16,710 --> 00:06:20,760
files into multiple Java bytecode files.

91
00:06:20,760 --> 00:06:23,660
Next, a tool called DX transforms the Java

92
00:06:23,660 --> 00:06:28,880
bytecodes into a single file of a
different bytecode format called DEX, and

93
00:06:28,880 --> 00:06:32,210
this bytecode file is
usually called classes.dex.

94
00:06:32,210 --> 00:06:36,080
Next the DEX file is packaged with
other application resources and

95
00:06:36,080 --> 00:06:38,360
installed on the device.

96
00:06:38,360 --> 00:06:41,320
And finally when the user
launches the application,

97
00:06:41,320 --> 00:06:45,160
the Dalvik Virtual Machine will
then execute the classes.dex file.

98
00:06:46,440 --> 00:06:50,240
Now the reason for doing all this
is that the Dalvik Virtual Machine,

99
00:06:50,240 --> 00:06:54,142
unlike the the Java Virtual Machine,
was specifically designed to run in

100
00:06:54,142 --> 00:06:58,615
the resource-constrained environment
which is typical of mobile devices.

101
00:06:58,615 --> 00:07:00,980
Now when I say resource-constrained,

102
00:07:00,980 --> 00:07:04,280
what I mean is that compared
to a typical desktop device,

103
00:07:04,280 --> 00:07:10,110
the typical mobile device is less
powerful and more limited in many ways.

104
00:07:10,110 --> 00:07:15,510
For example, it will probably have
a slower CPU, less memory and

105
00:07:15,510 --> 00:07:16,750
a limited battery life.

106
00:07:18,720 --> 00:07:21,770
So if you're interested in finding out
more about the Dalvik Virtual Machine

107
00:07:21,770 --> 00:07:26,420
itself then I recommend you take
a look at this video, Dalvik Virt,

108
00:07:26,420 --> 00:07:28,780
VM Internals by Dan Bornstein of Google.

109
00:07:30,820 --> 00:07:34,609
The next layer in the Android software
stack is the application framework.

110
00:07:35,660 --> 00:07:38,810
The application framework
contains reusable software that

111
00:07:38,810 --> 00:07:41,820
many mobile applications
are likely to need.

112
00:07:41,820 --> 00:07:43,840
For example, as we'll see in a minute,

113
00:07:43,840 --> 00:07:48,490
the View system contains common graphical
elements, things like buttons, and

114
00:07:48,490 --> 00:07:53,230
icons, that many applications
include in their user interfaces.

115
00:07:53,230 --> 00:07:55,349
Let's take a deeper look at
some of these components.

116
00:07:57,410 --> 00:08:00,220
One application framework
component is the Package Manager.

117
00:08:00,220 --> 00:08:03,180
The Package Manager is
essentially a database that

118
00:08:03,180 --> 00:08:07,100
keeps track of all the applications
currently installed on your device.

119
00:08:09,410 --> 00:08:11,460
So here's the home screen of my phone.

120
00:08:14,130 --> 00:08:18,890
When I click on the Launcher icon,
the phone shows me a bunch of icons,

121
00:08:18,890 --> 00:08:22,340
each one representing an application
package that's stored on my phone.

122
00:08:23,640 --> 00:08:27,720
The Package Manager stores information
about these applications, and

123
00:08:27,720 --> 00:08:30,450
that's useful for several reasons.

124
00:08:30,450 --> 00:08:35,550
For example, it allows applications
to find and contact each other so

125
00:08:35,550 --> 00:08:39,560
that one application can share data
with another application, or so

126
00:08:39,560 --> 00:08:42,610
that one application can
request services from another.

127
00:08:44,610 --> 00:08:47,990
Another application framework
component is the Window Manager.

128
00:08:47,990 --> 00:08:50,030
The Window Manager,

129
00:08:50,030 --> 00:08:55,349
as the name suggests, manages the many
windows that comprise applications.

130
00:08:58,400 --> 00:09:02,880
Here I'm launching the Browser
application, which appears as two windows.

131
00:09:03,980 --> 00:09:07,160
At the top,
there's the System Notification bar,

132
00:09:07,160 --> 00:09:11,150
which displays various status indicators
that tell the user about things

133
00:09:11,150 --> 00:09:16,180
like WiFi signal strength, remaining
battery power, and the current time.

134
00:09:17,440 --> 00:09:19,810
There's also a Main Application window,

135
00:09:19,810 --> 00:09:22,230
that in this case is showing
the current web page.

136
00:09:23,770 --> 00:09:26,510
An application can also
use various sub windows,

137
00:09:26,510 --> 00:09:29,270
such as when it shows menus or dialogs.

138
00:09:32,180 --> 00:09:37,150
As I mentioned earlier, the application
framework also contains the View System.

139
00:09:37,150 --> 00:09:41,240
The View System contains many common
graphical user interface elements,

140
00:09:41,240 --> 00:09:44,530
such as icons, text entry boxes,
buttons, and much more.

141
00:09:45,630 --> 00:09:47,851
Let's take a look at
the phone application.

142
00:09:51,181 --> 00:09:52,143
As you can see,

143
00:09:52,143 --> 00:09:57,189
the phone application's top level user
interface is organized as a set of tabs.

144
00:09:58,250 --> 00:10:01,600
And each tab corresponds
to a different user

145
00:10:01,600 --> 00:10:04,510
interface that supports
a different set of tasks.

146
00:10:05,840 --> 00:10:08,940
The Phone tab shows me a phone dialer.

147
00:10:08,940 --> 00:10:13,930
The Call Log tab shows a list of
recent incoming and outgoing calls.

148
00:10:13,930 --> 00:10:17,079
And the Contacts tab shows
a list of stored contacts.

149
00:10:19,320 --> 00:10:20,580
Now as I just said,

150
00:10:20,580 --> 00:10:26,750
when I select the Phone tab, I'm shown a
user interface that mimics a phone keypad.

151
00:10:26,750 --> 00:10:31,100
That keypad is made up of view system
components, things like buttons and

152
00:10:31,100 --> 00:10:32,650
text views.

153
00:10:32,650 --> 00:10:37,480
And then the application will listen as I
press these buttons and then respond by

154
00:10:37,480 --> 00:10:42,000
writing the corresponding digits to a text
view to show me what number I'm dialing.

155
00:10:43,830 --> 00:10:47,350
The next application framework
component is the Resource Manager.

156
00:10:48,590 --> 00:10:53,280
This component manages the non-compiled
resources that make up an application,

157
00:10:53,280 --> 00:10:59,430
things like strings, graphics,
and user interface layout files.

158
00:10:59,430 --> 00:11:02,117
And to give you example of
non-compiled resources,

159
00:11:02,117 --> 00:11:04,512
let's go back to the phone
application again.

160
00:11:13,604 --> 00:11:20,050
Now this tab has some English words on it,
and that's fine because I speak English.

161
00:11:22,440 --> 00:11:26,400
But Android is available around the world,
it's not limited to English speakers, and

162
00:11:26,400 --> 00:11:30,740
so it's important that we have an easy
way to customize applications for

163
00:11:30,740 --> 00:11:32,170
other languages.

164
00:11:32,170 --> 00:11:34,210
And one way that Android
supports that is that,

165
00:11:34,210 --> 00:11:38,380
that it lets you define
strings in multiple languages.

166
00:11:38,380 --> 00:11:41,390
For example, the phone
application has a string file for

167
00:11:41,390 --> 00:11:44,810
Italian words as well as one for
English words.

168
00:11:44,810 --> 00:11:48,572
So if you speak Italian, then you can
go into the Settings application and

169
00:11:48,572 --> 00:11:50,767
select Italian as your default language.

170
00:12:17,177 --> 00:12:22,050
Now, if I go back and rerun the phone
application, you'll see that Android will

171
00:12:22,050 --> 00:12:26,630
use the appropriate Italian words
rather than the English words.

172
00:12:26,630 --> 00:12:30,110
And, of course, you can do this for
as many languages as makes sense for

173
00:12:30,110 --> 00:12:30,890
your application.

174
00:12:33,240 --> 00:12:36,470
Another application framework
component is the Activity Manager.

175
00:12:37,940 --> 00:12:39,220
Now at a high level,

176
00:12:39,220 --> 00:12:43,280
Android activities often correspond
to a single user interface screen.

177
00:12:44,650 --> 00:12:48,310
Applications are then
created by stringing together

178
00:12:48,310 --> 00:12:51,890
multiple activities through
which the user can navigate.

179
00:12:51,890 --> 00:12:57,000
The Activity Manager helps to coordinate
and support that kind of navigation.

180
00:12:57,000 --> 00:12:58,840
So suppose I want to listen to some music.

181
00:13:02,100 --> 00:13:05,428
So here I'll click on the Launcher
icon to show my applications.

182
00:13:07,864 --> 00:13:10,280
From there,
I can click on the Music Player icon.

183
00:13:11,600 --> 00:13:15,390
And that will start an activity that
brings up a user interface screen

184
00:13:16,500 --> 00:13:20,900
showing the music I have on my device,
in this case sorted by artist.

185
00:13:22,410 --> 00:13:26,559
I can select an artist, and
see the albums by that artist.

186
00:13:28,710 --> 00:13:32,677
I can select one album by clicking on it.

187
00:13:32,677 --> 00:13:37,880
And this starts another activity that
brings up another user interface screen,

188
00:13:37,880 --> 00:13:40,950
showing the songs in
the album I just selected.

189
00:13:40,950 --> 00:13:46,880
And now if I hit the Back button,
I can go back to the last activity,

190
00:13:46,880 --> 00:13:49,090
and for example,
I can choose a different album.

191
00:13:50,900 --> 00:13:57,130
Now I can click on a specific song in that
album, and yet another activity starts up

192
00:13:57,130 --> 00:14:05,700
that brings up yet another user interface
screen, allowing me to play this song.

193
00:14:05,700 --> 00:14:09,579
Another application framework component
implements Content Providers.

194
00:14:11,200 --> 00:14:15,080
Content Providers are essentially
databases that allow applications to

195
00:14:15,080 --> 00:14:18,820
store and share structured information.

196
00:14:18,820 --> 00:14:23,310
For example, here we see that the phone
application can access stored

197
00:14:23,310 --> 00:14:28,070
contact information and
use it to dial a phone number.

198
00:14:28,070 --> 00:14:31,250
And it can do that because
the contact information is stored in

199
00:14:31,250 --> 00:14:33,220
a Content Provider.

200
00:14:33,220 --> 00:14:37,850
And even better, Content Providers are
designed to work across applications so

201
00:14:37,850 --> 00:14:41,150
not only can the phone dialer use
the contact information, but so

202
00:14:41,150 --> 00:14:46,280
can the MMSM, messaging application and
so can various social media applications.

203
00:14:46,280 --> 00:14:46,890
Let's take a look.

204
00:14:49,100 --> 00:14:51,070
So going back to the phone application,

205
00:14:51,070 --> 00:14:56,100
I can select the Contact tab to
access stored contact information.

206
00:14:56,100 --> 00:15:00,790
I can select one of the contacts
to quickly dial that contact.

207
00:15:00,790 --> 00:15:03,740
Now as I said, I can do that
because contact information is

208
00:15:03,740 --> 00:15:06,220
stored in a Content Provider.

209
00:15:06,220 --> 00:15:11,070
And again, even better, Content Providers
are designed to work across applications.

210
00:15:11,070 --> 00:15:15,470
So not only can the phone dialer use
the contacts, but so can the MMS messaging

211
00:15:15,470 --> 00:15:22,470
application, and so can Twitter, Facebook,
my email readers, and things like that.

212
00:15:22,470 --> 00:15:26,400
The next application framework
component is the Location Manager.

213
00:15:26,400 --> 00:15:30,150
The Location Manager allows
applications to receive location and

214
00:15:30,150 --> 00:15:34,120
movement information,
such as that generated by the GPS system.

215
00:15:35,130 --> 00:15:38,800
And this allows applications to
perform context-specific tasks,

216
00:15:38,800 --> 00:15:42,035
things like finding directions
from the current location.

217
00:15:45,549 --> 00:15:48,842
Now here I'm calling up
the Google Maps application,

218
00:15:48,842 --> 00:15:52,780
which queries the Location Manager for
my current location, and

219
00:15:52,780 --> 00:15:56,300
then shows a map of the area
around that current location.

220
00:15:58,380 --> 00:16:01,620
The last application framework
component I'll talk about today

221
00:16:01,620 --> 00:16:03,100
is the Notification Manager.

222
00:16:04,130 --> 00:16:08,470
The Notification Manager allows
applications to place information in

223
00:16:08,470 --> 00:16:10,930
the Notification bar, for example,

224
00:16:10,930 --> 00:16:13,550
to let users know that
certain events have occurred.

225
00:16:16,400 --> 00:16:20,060
For example, suppose I want to
send my wife an MMS message.

226
00:16:21,200 --> 00:16:24,890
And let's suppose that at right at
this minute, she's writing an email or

227
00:16:24,890 --> 00:16:27,590
making a phone call or whatever.

228
00:16:27,590 --> 00:16:31,860
So although she probably wants to know
that I've sent her an MMS message,

229
00:16:31,860 --> 00:16:34,870
she might not want that
to disrupt her right now.

230
00:16:34,870 --> 00:16:38,770
Well, Android handles this
with a Notification Manager.

231
00:16:38,770 --> 00:16:43,510
And the way that works is that there's
some software running on her phone

232
00:16:43,510 --> 00:16:46,410
that's always listening for
incoming MMS messages.

233
00:16:47,530 --> 00:16:52,220
When one arrives, that software uses
the Notification Manager to place

234
00:16:52,220 --> 00:16:55,020
an icon in her phone's Notification bar.

235
00:16:56,120 --> 00:16:59,800
And that's shown as
a little smiley face icon.

236
00:16:59,800 --> 00:17:02,930
And I've whited out some of the,
some of the information there for privacy.

237
00:17:04,370 --> 00:17:07,920
Now when she's ready,
she can pull down on the Notification bar,

238
00:17:07,920 --> 00:17:11,940
which then shows more information
about the specific notification.

239
00:17:11,940 --> 00:17:16,310
And if she clicks on that notification,
the MMS application will start up and

240
00:17:16,310 --> 00:17:18,410
she can read and
hopefully respond to my message.

241
00:17:23,800 --> 00:17:28,080
The last layer of the Android software
stack is the Application layer.

242
00:17:28,080 --> 00:17:33,320
As I said earlier, Android comes
with some built-in applications, and

243
00:17:33,320 --> 00:17:36,680
these include things like the home screen,

244
00:17:36,680 --> 00:17:41,430
the phone dialer, the web browser,
an email reader, and more.

245
00:17:42,550 --> 00:17:45,950
And one of the things that's really
nice about Android is that none of

246
00:17:45,950 --> 00:17:48,930
these apps is hard-coded into the system.

247
00:17:50,410 --> 00:17:53,056
If you have a better app,
you can substitute your app for

248
00:17:53,056 --> 00:17:54,421
any of these standard apps.

