1
00:00:00,000 --> 00:00:10,000
[MUSIC]

2
00:00:15,170 --> 00:00:18,307
Today we're going to talk about
the Android Development Environment,

3
00:00:18,307 --> 00:00:21,770
an integrated set of tools to help you
create your own Android applications.

4
00:00:21,770 --> 00:00:27,250
In our last lesson,
I introduced you to the Android platform.

5
00:00:27,250 --> 00:00:30,650
I talked about how the Android
platform is a software stack for

6
00:00:30,650 --> 00:00:33,680
building and running mobile applications.

7
00:00:33,680 --> 00:00:36,490
And if you've used an Android device,
to write email,

8
00:00:36,490 --> 00:00:40,990
to take photos, to get directions to
some location, to play games, and so

9
00:00:40,990 --> 00:00:44,730
on, then you've seen the Android platform
in action and you know what it can do.

10
00:00:45,990 --> 00:00:47,470
So the next question is,

11
00:00:47,470 --> 00:00:52,290
how can you use the Android platform
to write your own Android apps.

12
00:00:52,290 --> 00:00:55,900
Well one part of the answer, is that you
need to learn the details of the Android

13
00:00:55,900 --> 00:01:00,335
platform itself, and in fact that's
what we'll do throughout this class.

14
00:01:00,335 --> 00:01:03,575
Another part of the answer though,
is that you need to learn and

15
00:01:03,575 --> 00:01:08,485
master the tools that allow you to
make use of the Android platform

16
00:01:08,485 --> 00:01:09,815
in order to create new applications.

17
00:01:09,815 --> 00:01:11,985
And that's what we're
going to focus on today.

18
00:01:11,985 --> 00:01:14,545
The tools that I'm talking about

19
00:01:14,545 --> 00:01:16,715
are called
the Android Development Environment, and

20
00:01:16,715 --> 00:01:21,540
you should think of them as your workbench
for creating Android applications.

21
00:01:21,540 --> 00:01:26,150
And like any skilled craftsperson, the
more comfortable you are with your tools,

22
00:01:26,150 --> 00:01:29,070
the easier it's going to be
to produce top quality work.

23
00:01:30,310 --> 00:01:33,060
In this lesson,
we'll cover several topics.

24
00:01:33,060 --> 00:01:37,750
First I'll talk about downloading the
development environment, or Android SDK,

25
00:01:38,750 --> 00:01:42,590
including the Android Studio
Integrated Development Environment, or

26
00:01:42,590 --> 00:01:46,700
IDE, and assorted Android Developer Tools.

27
00:01:46,700 --> 00:01:50,660
And then, I'll show you
the Android Studio IDE in action, and

28
00:01:50,660 --> 00:01:54,550
together we'll create a very
simple Android application.

29
00:01:54,550 --> 00:01:58,840
After that, I'll show you some specific
tools, such as the Android Emulator,

30
00:01:58,840 --> 00:02:03,530
which allows you to run Android
apps without a physical device.

31
00:02:03,530 --> 00:02:07,320
And then I'll show you how to use
the debugger to help you diagnose eventual

32
00:02:07,320 --> 00:02:09,630
problems with your applications.

33
00:02:09,630 --> 00:02:12,670
And finally,
I'll show you a variety of other tools

34
00:02:12,670 --> 00:02:15,780
designed to help you further
perfect your applications.

35
00:02:17,410 --> 00:02:21,840
Before you get started, make sure you
have a supported operating system.

36
00:02:21,840 --> 00:02:26,520
For Windows, these include Windows 7,
Windows 8, Windows Vista, and

37
00:02:26,520 --> 00:02:27,910
Windows Server 2003.

38
00:02:27,910 --> 00:02:35,047
For Mac, you'll need Mac OS X,
10.8.5, up to 10.9.

39
00:02:35,047 --> 00:02:38,550
And for Linux,
several distributions should work, but

40
00:02:38,550 --> 00:02:44,640
the Android SDK is tested on Ubuntu 10.04.

41
00:02:44,640 --> 00:02:47,960
And you can see the Androids developers
website for more information about this.

42
00:02:50,680 --> 00:02:54,730
And you should also make sure that you
have the Java Development Kit Version

43
00:02:54,730 --> 00:02:55,960
7 installed.

44
00:02:55,960 --> 00:02:58,780
Again, check the following website for
more information.

45
00:03:01,130 --> 00:03:04,410
Now Google generally recommends
that your development machine

46
00:03:04,410 --> 00:03:06,350
meet the following specs.

47
00:03:06,350 --> 00:03:12,350
It should have a minimum of 2 gigabytes
of RAM, but 4 gigabytes is recommended.

48
00:03:12,350 --> 00:03:14,620
It should have at least 1
gigabyte of storage for

49
00:03:14,620 --> 00:03:19,460
the Android SDK,
emulator system images, and caches.

50
00:03:19,460 --> 00:03:22,890
And it should also have at least
400 megabytes of free disc space

51
00:03:22,890 --> 00:03:23,510
when it's running.

52
00:03:24,840 --> 00:03:27,830
Oh, and it should also have a minimum
screen resolution of 1280 x 800.

53
00:03:27,830 --> 00:03:33,830
So now you're ready to get started.

54
00:03:33,830 --> 00:03:38,180
First, you'll need to download and
install the Android SDK.

55
00:03:38,180 --> 00:03:40,170
And I suggest that you do this now.

56
00:03:40,170 --> 00:03:43,170
And that way you can follow
along with my examples

57
00:03:43,170 --> 00:03:45,600
while you watch the rest of this lesson.

58
00:03:45,600 --> 00:03:48,590
You can find the SDK
at the URL shown here.

59
00:03:50,570 --> 00:03:55,600
Let me also point you to a short video
put together by our friends at Amazon.

60
00:03:55,600 --> 00:03:57,980
The video is available at this link.

61
00:03:57,980 --> 00:04:01,600
And it'll walk you through the entire
process of downloading and

62
00:04:01,600 --> 00:04:03,400
installing the Android SDK.

63
00:04:05,330 --> 00:04:09,470
Now once installed, the Android SDK
provides you with several things.

64
00:04:09,470 --> 00:04:14,170
First, it has at least one version of
the Android platform, including libraries,

65
00:04:14,170 --> 00:04:17,720
reusable software tools,
and documentation.

66
00:04:17,720 --> 00:04:22,520
It also includes the Android Studio IDE,
which includes a number of tools that'll

67
00:04:22,520 --> 00:04:27,340
help you develop, run, test,
and debug your Android apps.

68
00:04:27,340 --> 00:04:29,900
And it also has a system image for
the emulator.

69
00:04:29,900 --> 00:04:30,840
So, you can run and

70
00:04:30,840 --> 00:04:34,679
debug your Android apps without
needing to have an actual device.

71
00:04:37,580 --> 00:04:41,280
In our last lesson, we talked about
the Android platform in detail.

72
00:04:41,280 --> 00:04:44,660
So today, we'll focus on the other
three elements one by one.

73
00:04:44,660 --> 00:04:46,710
But before we do that,

74
00:04:46,710 --> 00:04:50,670
let's take a look at a very simple
Android App called Hello Android.

75
00:04:52,530 --> 00:04:54,180
Here I'm showing my phone's home screen.

76
00:04:55,470 --> 00:04:58,100
First, I'll click on the launcher icon and

77
00:04:58,100 --> 00:05:02,140
then I'll click on the Hello Android icon,
to launch the application.

78
00:05:02,140 --> 00:05:07,340
The application starts and
displays the words hello world.

79
00:05:07,340 --> 00:05:11,330
Now that's about as simple as it gets,
but let's walk through the process

80
00:05:11,330 --> 00:05:15,090
of writing this Hello Android
application Using the IDE.

81
00:05:15,090 --> 00:05:20,760
Now this my IDE opened to full screen.

82
00:05:20,760 --> 00:05:23,360
Let's start by creating a new
Android application project.

83
00:05:24,360 --> 00:05:29,480
One way to do that is to go to the File
menu, then New, then New Project,

84
00:05:30,880 --> 00:05:34,950
and once you do this, you'll see a series
of dialog boxes that ask you for

85
00:05:34,950 --> 00:05:37,150
information about your application.

86
00:05:38,460 --> 00:05:42,340
On the first screen let's enter
HelloAndroid for the application name.

87
00:05:44,230 --> 00:05:49,810
Where it asks for a Company Domain,
I'm using examples.course.

88
00:05:49,810 --> 00:05:54,800
The IDE will use that to compute
the package name for the application.

89
00:05:54,800 --> 00:05:58,100
And here you can see that it
reverses the company domain and

90
00:05:58,100 --> 00:06:02,040
then tacks on the application name,
all in lower case.

91
00:06:02,040 --> 00:06:08,320
So, in this case, you see the package
name is course.examples.helloandroid.

92
00:06:08,320 --> 00:06:12,090
And the idea here is that
package names created this way

93
00:06:12,090 --> 00:06:16,530
are less likely to conflict with
the package names of other applications

94
00:06:16,530 --> 00:06:18,209
that might end up on the same device.

95
00:06:19,680 --> 00:06:20,840
Now go ahead and hit Next.

96
00:06:22,000 --> 00:06:25,920
Now this screen asks you what kind
of devices you want this application

97
00:06:25,920 --> 00:06:26,450
to run on.

98
00:06:27,740 --> 00:06:29,880
Here I'll stick with Phone and Tablet.

99
00:06:29,880 --> 00:06:34,835
And I'll choose API level 21,
which corresponds to Android

100
00:06:34,835 --> 00:06:38,470
5.0 as the oldest platform
this app will run on.

101
00:06:39,480 --> 00:06:45,150
You can also see that at this time very
few android devices are running API,

102
00:06:45,150 --> 00:06:46,920
level 21 or newer.

103
00:06:46,920 --> 00:06:50,230
So in practice you might want to
chose a lower API level.

104
00:06:52,540 --> 00:06:53,510
Now click on Next.

105
00:06:55,430 --> 00:07:00,250
This dialog is asking what kind of
UI template files I'd like the IDE

106
00:07:00,250 --> 00:07:01,380
to pre-build for me.

107
00:07:02,970 --> 00:07:06,050
Here I'll keep it simple, and
I'll go with a single Blank Activity.

108
00:07:07,180 --> 00:07:08,870
Again, I'll click on the Next button.

109
00:07:10,170 --> 00:07:13,590
And the next dialogue
asks how I want to name

110
00:07:13,590 --> 00:07:15,650
some of the application's
source code file.

111
00:07:16,770 --> 00:07:20,080
I'll just accept the defaults here,
and then I'll click Finish.

112
00:07:21,340 --> 00:07:24,750
Now the IDE will generate
the application's source code and

113
00:07:24,750 --> 00:07:25,580
layout files.

114
00:07:27,300 --> 00:07:32,090
And once it's finished, the IDE displays
a file called activity_main.xlm,

115
00:07:32,090 --> 00:07:36,790
which defines the application's
user interface layout.

116
00:07:38,440 --> 00:07:42,710
And based on the contents of this file,
the IDE will show you

117
00:07:42,710 --> 00:07:47,270
whatever it can about how this
application will look when it runs.

118
00:07:47,270 --> 00:07:52,142
As you can see here,
this app will display a simple

119
00:07:52,142 --> 00:07:55,629
screen with the words hello world.

120
00:07:55,629 --> 00:08:00,128
Let's also take a quick look at
the source code for this application.

121
00:08:00,128 --> 00:08:04,548
So first I'll open up
the file MainActivity.java.

122
00:08:04,548 --> 00:08:08,510
And that opens up an editor window
showing the contents of the file.

123
00:08:09,850 --> 00:08:12,790
Now I won't talk too much about
this source code right now.

124
00:08:12,790 --> 00:08:15,352
Except to say that when
this application runs,

125
00:08:15,352 --> 00:08:20,070
the onCreate method of
this class will be called.

126
00:08:20,070 --> 00:08:25,730
And that code will set up and display
the application's user interface screen.

127
00:08:27,160 --> 00:08:29,480
So let's run this code
to see what happens.

128
00:08:30,900 --> 00:08:35,910
Now one way to run an application, is to
click on, Run in the application bar.

129
00:08:35,910 --> 00:08:38,100
Then select, Run app.

130
00:08:38,100 --> 00:08:41,975
And you could also just type in
the keyboard sho, shortcut, Ctrl+R,

131
00:08:41,975 --> 00:08:43,210
to run the app as well.

132
00:08:45,020 --> 00:08:49,790
Now a dialog box pops up,
asking where to run this application.

133
00:08:49,790 --> 00:08:53,040
In this case, I only have my phone
connected, so I'll choose that.

134
00:08:55,960 --> 00:09:00,380
And now we wait while the application
is copied to the phone, and then run.

135
00:09:02,140 --> 00:09:06,080
And there you have it, your first
Android application running on a device.

136
00:09:09,425 --> 00:09:12,540
Now the phone I just used is a Nexus 4.

137
00:09:12,540 --> 00:09:16,270
But let's suppose that I'd like to test
out this app on a different phone,

138
00:09:16,270 --> 00:09:18,140
say the Galaxy Nexus.

139
00:09:18,140 --> 00:09:20,430
But I don't have one of those phones.

140
00:09:20,430 --> 00:09:24,532
In that case, rather than run out and
buy a new Galaxy Nexus,

141
00:09:24,532 --> 00:09:30,252
I can just run HelloAndroid on an emulated
galaxy Nexus using the Android emulator.

142
00:09:30,252 --> 00:09:35,145
In order to do that, I first need to
create the emulated phone instance that I

143
00:09:35,145 --> 00:09:37,142
will use inside the emulator.

144
00:09:37,142 --> 00:09:43,235
And these emulated phone instances are
called Android Virtual Devices, or AVDs.

145
00:09:43,235 --> 00:09:46,065
So let's go back to the IDE and

146
00:09:46,065 --> 00:09:50,829
set up an Android virtual device
corresponding to a Galaxy Nexus.

147
00:09:53,020 --> 00:09:54,080
So now we're back in the IDE.

148
00:09:55,500 --> 00:10:00,360
First, I'll go to the tool bar and
launch the Android Virtual Device Manager.

149
00:10:00,360 --> 00:10:02,150
It's a bit hard to see here, but look for

150
00:10:02,150 --> 00:10:06,550
the icon that shows an Android
in front of a device.

151
00:10:06,550 --> 00:10:11,260
Clicking that will display a dialogue
box showing existing virtual devices and

152
00:10:11,260 --> 00:10:12,640
allowing you to make new ones.

153
00:10:13,860 --> 00:10:15,680
Let's create a new virtual device.

154
00:10:16,700 --> 00:10:17,430
To do that,

155
00:10:17,430 --> 00:10:23,350
click on the Create Virtual Device button,
which will bring up a new dialogue box.

156
00:10:23,350 --> 00:10:27,150
And I'll start by picking
the Galaxy Nexus device definition.

157
00:10:27,150 --> 00:10:29,220
And then I'll click Next.

158
00:10:30,490 --> 00:10:33,540
Now I'll pick a system image for
the device.

159
00:10:33,540 --> 00:10:36,250
And in this case, let's use a Lollipop or

160
00:10:36,250 --> 00:10:42,260
Android 5.1.1 image that
also has the Google APIs.

161
00:10:42,260 --> 00:10:46,330
I'm picking this image because it
includes apps such as Google Maps

162
00:10:46,330 --> 00:10:49,200
which I plan to use later in this lesson.

163
00:10:49,200 --> 00:10:50,660
Now, I'll click Next.

164
00:10:51,900 --> 00:10:57,200
And here under AVD Name, you can give this
new virtual device any name you want,

165
00:10:57,200 --> 00:10:58,660
but I'll stick with the defaults here.

166
00:10:59,980 --> 00:11:03,630
You can also click on
Show Advanced Settings to do things like

167
00:11:03,630 --> 00:11:06,490
including a front or
back facing camera, or

168
00:11:06,490 --> 00:11:09,870
changing the size of the device's
SD card and things like that.

169
00:11:11,670 --> 00:11:12,830
Now, I'll hit the Finish button.

170
00:11:13,960 --> 00:11:16,454
And the new AVD will eventually
show up in the list.

171
00:11:23,566 --> 00:11:26,950
Now you can click on
that to start that AVD.

172
00:11:26,950 --> 00:11:32,140
And at this point, you may need to wait
while the virtual device boots up.

173
00:11:41,558 --> 00:11:42,853
I'll come back when it's done.

174
00:11:42,853 --> 00:11:49,505
Okay, and there's the home screen
of an emulated Galaxy Nexus.

175
00:11:55,612 --> 00:12:00,372
Now that the emulated Galaxy Nexus
is running, let's return to the IDE.

176
00:12:00,372 --> 00:12:05,391
This time I'll install and
run HelloAndroid on the emulated phone,

177
00:12:05,391 --> 00:12:07,909
rather than on a physical device.

178
00:12:09,920 --> 00:12:12,966
So just like we did before,
click Run and then Run app.

179
00:12:16,784 --> 00:12:20,197
And a dialog box pops up asking
you which device to use.

180
00:12:20,197 --> 00:12:24,099
This time,
instead of selecting an actual device,

181
00:12:24,099 --> 00:12:28,189
I'll select the virtual
device that we just created.

182
00:12:29,410 --> 00:12:32,898
And I'll click OK.
The IDE will install the application on

183
00:12:32,898 --> 00:12:35,657
the virtual device and then run it.

184
00:12:35,657 --> 00:12:41,860
And here you go, HelloAndroid,
running on the emulator.

185
00:12:44,170 --> 00:12:49,130
Now as you can see, it's pretty much the
same as what we saw on my actual device.

186
00:12:49,130 --> 00:12:53,458
But of course, the styling's
a bit different because my actual

187
00:12:53,458 --> 00:12:56,665
device is a Nexus 4, running Android 5.0,

188
00:12:56,665 --> 00:13:02,459
while this virtual device represents
a Galaxy Nexus, running Android 5.1.1.

189
00:13:02,459 --> 00:13:06,583
So today I've shown you that
you can build applications,

190
00:13:06,583 --> 00:13:11,647
like HelloAndroid on a natural device,
inside an emulator, or both.

191
00:13:11,647 --> 00:13:14,491
And there are pluses and
minuses with each approach.

192
00:13:14,491 --> 00:13:18,914
For example, the benefits of using
an emulator include that emulators

193
00:13:18,914 --> 00:13:21,220
are cheaper than actual devices.

194
00:13:21,220 --> 00:13:24,790
You don't have to buy all the devices
that you may want to test on.

195
00:13:24,790 --> 00:13:29,160
Also, unlike a phone, the emulator
allows you to easily configure hardware

196
00:13:29,160 --> 00:13:34,100
characteristics like the size of the SD
card you have, the display size, and

197
00:13:34,100 --> 00:13:35,630
whether the device has a track ball.

198
00:13:36,700 --> 00:13:41,530
Also, any modifications you make
are isolated to the emulated device, so

199
00:13:41,530 --> 00:13:45,210
you don't have to worry that your testing
will mess up your phone or its data.

200
00:13:46,390 --> 00:13:50,200
On the other hand, emulators have
some real downsides as well.

201
00:13:50,200 --> 00:13:52,580
In particular,
the Android emulator is really slow.

202
00:13:52,580 --> 00:13:56,690
And that can be frustrating when you're
trying to rapidly experiment and

203
00:13:56,690 --> 00:14:00,560
tune your app, and you have to wait for
the emulator to start up and run.

204
00:14:01,630 --> 00:14:05,150
Also, some features are not
well supported by the emulator.

205
00:14:05,150 --> 00:14:08,880
For instance, there's no support for
Bluetooth connectivity and no support for

206
00:14:08,880 --> 00:14:13,480
connecting accessories to
the emulator via USB cables.

207
00:14:13,480 --> 00:14:17,530
Also, some software features aren't
available by default in the emulator, so

208
00:14:17,530 --> 00:14:19,330
certain applications may not run on it.

209
00:14:20,520 --> 00:14:24,810
And finally, at the end of the day,
the emulator is not the device.

210
00:14:24,810 --> 00:14:28,140
You can't really know how your
app is going to look and perform

211
00:14:28,140 --> 00:14:31,920
on an actual device just by looking
at how it performs in the emulator.

212
00:14:33,680 --> 00:14:35,990
So let's take a look at some
of the advanced features

213
00:14:35,990 --> 00:14:38,390
that the Android Emulator does support.

214
00:14:38,390 --> 00:14:41,860
For instance, you can configure
the emulator to emulate the speed and

215
00:14:41,860 --> 00:14:45,180
latency of different cellular networks.

216
00:14:45,180 --> 00:14:49,220
You can configure the emulator to emulate
different battery states, such as whether

217
00:14:49,220 --> 00:14:53,770
you're running low on battery power,
or currently charging the device.

218
00:14:53,770 --> 00:14:58,306
And you can also inject mock location
coordinates to make testing of location

219
00:14:58,306 --> 00:15:01,040
aware applications easier.

220
00:15:01,040 --> 00:15:04,630
And typically you'd use these
features to help you test code that

221
00:15:04,630 --> 00:15:08,080
must respond to the environment or
environmental events.

222
00:15:08,080 --> 00:15:12,210
For instance, applications are often
designed to do different things

223
00:15:12,210 --> 00:15:14,530
depending on the battery level.

224
00:15:14,530 --> 00:15:15,030
Let's take a look.

225
00:15:18,259 --> 00:15:19,576
Let me show you how easy this is.

226
00:15:19,576 --> 00:15:25,370
Here, I'm showing a terminal window and
an emulator running a virtual device.

227
00:15:26,450 --> 00:15:30,020
In the terminal window, I'll use
telnet to connect to the emulator.

228
00:15:31,090 --> 00:15:34,380
And you can see the port number
on which the emulator's listening

229
00:15:34,380 --> 00:15:37,640
in the emulator window's title bar.

230
00:15:37,640 --> 00:15:40,740
In this case that's 5554.

231
00:15:40,740 --> 00:15:47,420
So I'll type telnet localhost 5554.

232
00:15:47,420 --> 00:15:52,182
And now I'll set the network
characteristics to

233
00:15:52,182 --> 00:15:57,420
emulate a slower edge network,
network speed edge.

234
00:15:57,420 --> 00:16:01,262
And notice that the cellular
network status icon

235
00:16:01,262 --> 00:16:04,545
in the notification bar Has now changed.

236
00:16:04,545 --> 00:16:10,810
Now I'll change it back to 3G
by typing network speed full.

237
00:16:13,150 --> 00:16:18,651
And now I'll change the battery
status to reflect a phone

238
00:16:18,651 --> 00:16:23,930
that is running low on battery,
power capacity 10.

239
00:16:23,930 --> 00:16:28,622
And again, you can see that the battery
status indicator in the notification bar

240
00:16:28,622 --> 00:16:31,460
has changed to reflect
the lower battery level.

241
00:16:32,670 --> 00:16:36,390
And you can also see that the device
is currently plugged in and charging.

242
00:16:37,390 --> 00:16:41,540
Well I can also change the charging status
to indicate the the phone is not plugged

243
00:16:41,540 --> 00:16:49,830
in, power status not-charging.

244
00:16:49,830 --> 00:16:52,840
And you can see that the charging
status indicator has gone away.

245
00:16:55,300 --> 00:17:01,934
I can also set the emulator's
location to Washington D.C.

246
00:17:01,934 --> 00:17:05,967
by typing in the following command,

247
00:17:05,967 --> 00:17:10,530
geo fix minus 77.04 38.897.

248
00:17:10,530 --> 00:17:13,771
If I now open up the maps application,

249
00:17:13,771 --> 00:17:18,647
you can see that it shows my
location as Washington, DC.

250
00:17:24,305 --> 00:17:28,592
The Android emulator also allows you
to emulate networked interactions,

251
00:17:28,592 --> 00:17:31,390
such as receiving a phone call or
an SMS message.

252
00:17:33,310 --> 00:17:37,742
Back in the terminal window, I'll
reconnect to the emulator over telnet.

253
00:17:37,742 --> 00:17:42,181
And then I'll give the emulator
a command which will cause it to

254
00:17:42,181 --> 00:17:44,629
emulate an incoming SMS message.

255
00:17:44,629 --> 00:17:49,654
And that command is sms send,

256
00:17:49,654 --> 00:17:55,483
then the sender's phone number,

257
00:17:55,483 --> 00:17:59,908
3015555555.

258
00:17:59,908 --> 00:18:06,491
And then the text message itself,
this is a text message.

259
00:18:06,491 --> 00:18:11,202
Now keep your eye on the emulator window
to see what happens when I hit Return,

260
00:18:11,202 --> 00:18:11,940
here goes.

261
00:18:13,400 --> 00:18:18,670
Now as you can see, the emulator's
notification bar, now contains an icon

262
00:18:18,670 --> 00:18:23,575
Indicating that the emulated phone
just received my SMS message.

263
00:18:23,575 --> 00:18:28,347
And we can pull down on the notification
bar to start the messaging

264
00:18:28,347 --> 00:18:32,270
application to take a closer
look at the SMS message.

265
00:18:37,694 --> 00:18:42,123
Android even allows two emulators
to interact with each other.

266
00:18:44,135 --> 00:18:47,447
Here I'm showing two
emulator instances running.

267
00:18:47,447 --> 00:18:51,074
In one,
I'll open the phone application and

268
00:18:51,074 --> 00:18:54,232
start to dial the number of the second.

269
00:18:54,232 --> 00:18:59,501
The number of the second
emulator is the port number shown

270
00:18:59,501 --> 00:19:05,230
at the top of that emulator window,
in this case, 5554.

271
00:19:05,230 --> 00:19:08,930
And now you see that the second
emulator has received the call and

272
00:19:08,930 --> 00:19:09,925
is ringing its user.

273
00:19:09,925 --> 00:19:14,428
[SOUND] So I'll pick up the incoming
call in the second emulator.

274
00:19:16,521 --> 00:19:20,056
And you can see that the emulator's
interface has now changed to

275
00:19:20,056 --> 00:19:22,099
reflect that the call is connected.

276
00:19:23,640 --> 00:19:26,520
Now, if one of the parties
hits the hold button,

277
00:19:26,520 --> 00:19:29,580
that will also be reflected
in both phone applications.

278
00:19:31,120 --> 00:19:34,864
And once the users are done with the call,
I can hang up.

279
00:19:34,864 --> 00:19:39,578
[SOUND] And both emulators show that
the call has been disconnected.

280
00:19:39,578 --> 00:19:43,357
And of course, that's just a few of
the things you can do with the emulator.

281
00:19:43,357 --> 00:19:46,364
There are many other
interesting features as well.

282
00:19:46,364 --> 00:19:50,289
And if you want to know more, I recommend
you take a look at the emulator

283
00:19:50,289 --> 00:19:52,804
page on the Android developer's website.

