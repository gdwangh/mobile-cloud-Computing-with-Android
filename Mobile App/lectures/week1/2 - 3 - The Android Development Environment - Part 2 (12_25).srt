1
00:00:00,033 --> 00:00:08,851
[MUSIC]

2
00:00:15,645 --> 00:00:19,957
The IDE also comes with a debugger that
gives developers powerful tools for

3
00:00:19,957 --> 00:00:24,060
examining the internal state
of a running application.

4
00:00:24,060 --> 00:00:28,130
And this can be useful of course when
you have a bug in your application and

5
00:00:28,130 --> 00:00:31,200
you're not sure exactly what's causing it.

6
00:00:31,200 --> 00:00:33,800
So let's use the debugger
to examine an application.

7
00:00:35,620 --> 00:00:40,020
Here I'm showing you a simple Android
application I've named, the answer.

8
00:00:40,020 --> 00:00:45,090
And this app is supposed to show you
the answer to life, the universe and

9
00:00:45,090 --> 00:00:49,590
everything which, as The Hitchhiker's
Guide to the Galaxy tells us, is 42.

10
00:00:49,590 --> 00:00:52,730
As you can see however,

11
00:00:52,730 --> 00:00:57,830
instead of displaying 42,
this app says, we may never know.

12
00:00:57,830 --> 00:00:59,770
So clearly there's a bug somewhere.

13
00:01:01,060 --> 00:01:02,920
Let's use the debugger
to track that bug down.

14
00:01:04,450 --> 00:01:06,410
And here we are in the IDE.

15
00:01:06,410 --> 00:01:10,330
First I'll open up the answer application
and show you it's source code.

16
00:01:11,870 --> 00:01:15,340
Now, the truth is that this
is a pretty silly program and

17
00:01:15,340 --> 00:01:19,440
a bug would be fairly obvious once
you've looked at the code a bit.

18
00:01:19,440 --> 00:01:23,870
But my goal here is to show you how the
debugger works, so just between you and

19
00:01:23,870 --> 00:01:26,790
us, let's pretend that we
don't know what's going on.

20
00:01:26,790 --> 00:01:31,785
And you can see that there's
an array called mAnswers through

21
00:01:31,785 --> 00:01:36,597
which the program will search looking for
the answer 42.

22
00:01:40,481 --> 00:01:44,580
Now here's the onCreate method which is
the starting point when this class is

23
00:01:44,580 --> 00:01:45,219
executed.

24
00:01:46,460 --> 00:01:50,240
Inside onCreate there's a call
to a method called findAnswer.

25
00:01:50,240 --> 00:01:53,492
And the code for the findAnswer
method is listed down below.

26
00:01:53,492 --> 00:01:59,860
Now findAnswer is supposed to
search the mAnswers array and

27
00:01:59,860 --> 00:02:04,440
return the number 42 if it's in there or
minus one, if it's not.

28
00:02:06,770 --> 00:02:12,480
Now going back up, the program stores
findAnswers return value in the variable

29
00:02:12,480 --> 00:02:18,200
val, and then uses the variable to
compute a string called output.

30
00:02:18,200 --> 00:02:19,040
Then finally,

31
00:02:19,040 --> 00:02:24,590
the program calls the setText method to
display the output string on the screen.

32
00:02:25,810 --> 00:02:26,930
So let's say that,

33
00:02:26,930 --> 00:02:30,540
since I don't know where the bug is,
I decide to debug this program.

34
00:02:32,200 --> 00:02:37,080
The first thing I'll do then is to set
a break point that stops the program

35
00:02:37,080 --> 00:02:38,730
when it enters the onCreate method.

36
00:02:40,660 --> 00:02:45,800
Now, instead of running the program,
I'll debug it by selecting Run, and

37
00:02:45,800 --> 00:02:48,730
then debug app from the application bar.

38
00:02:48,730 --> 00:02:52,760
And I could have also just
typed Ctrl+D as well.

39
00:02:52,760 --> 00:02:54,640
I'll click OK to run this on my phone.

40
00:02:54,640 --> 00:03:00,220
Now when the application reaches onCreate,
it stops and

41
00:03:00,220 --> 00:03:04,449
shows me the debug view with the current
line highlighted in the source code.

42
00:03:05,540 --> 00:03:11,160
At this point, I'll step through the code
line by line, examining the program state.

43
00:03:11,160 --> 00:03:15,970
To step forward, I'll select
Step Over from the debugger toolbar,

44
00:03:15,970 --> 00:03:17,740
which advances the program one line.

45
00:03:18,780 --> 00:03:20,090
Let me do that a few more times.

46
00:03:23,210 --> 00:03:26,980
And I'm now at the line
that calls findAnswer.

47
00:03:26,980 --> 00:03:29,560
And store the return result
in the variable val.

48
00:03:30,680 --> 00:03:31,930
Let me step over this line.

49
00:03:33,490 --> 00:03:38,280
And once I step over this line, you'll
see that the value of the variable val

50
00:03:38,280 --> 00:03:41,560
is now minus 10,
which is already a problem.

51
00:03:41,560 --> 00:03:42,620
It should have been 42.

52
00:03:42,620 --> 00:03:48,540
Now if I advance again, I see that the
output string is set to We may never know.

53
00:03:49,840 --> 00:03:53,660
Okay, so the problem is certainly
down in the findAnswer method, so

54
00:03:53,660 --> 00:03:55,587
let's look more closely
at the findAnswer method.

55
00:03:56,800 --> 00:04:00,529
To do that, I'll put a break
point at the findAnswer method,

56
00:04:00,529 --> 00:04:02,691
and then restart the application.

57
00:04:11,374 --> 00:04:15,605
Now this time when the application stops
at onCreate I'll just hit the resume

58
00:04:15,605 --> 00:04:19,906
button which let's the application
continue executing until the findAnswer

59
00:04:19,906 --> 00:04:21,030
break point is hit.

60
00:04:22,640 --> 00:04:26,690
And I can now step forward in this method
and examine the values of different

61
00:04:26,690 --> 00:04:30,230
variables to determine that
42 is indeed in the array,

62
00:04:30,230 --> 00:04:34,970
and that findAnswer sees it, but
considers it the wrong answer.

63
00:04:36,470 --> 00:04:40,220
Anyway, as I'm sure you've figured
out long ago, the problem is that I'm

64
00:04:40,220 --> 00:04:45,630
accidentally checking for
not equals rather than for equals, equals.

65
00:04:46,730 --> 00:04:48,560
So, I'll fix that.

66
00:04:48,560 --> 00:04:49,510
And now I'll start over.

67
00:04:50,580 --> 00:04:52,725
And this time we'll see
the correct behavior.

68
00:04:59,327 --> 00:05:01,220
And there it goes.

69
00:05:01,220 --> 00:05:05,820
And yes, the answer to life,
the universe and everything is indeed 42.

70
00:05:05,820 --> 00:05:11,870
And I think the debuggers help most
when you have a reasonably good

71
00:05:11,870 --> 00:05:17,700
idea of where your problem is, and you
can focus in on just a few lines of code.

72
00:05:17,700 --> 00:05:21,730
But, in many other situations,
that kind of low level instruction by

73
00:05:21,730 --> 00:05:26,970
instruction examination that debuggers
are so good at, is a lot less helpful.

74
00:05:26,970 --> 00:05:30,490
Instead it may be better
to use more general tools

75
00:05:30,490 --> 00:05:35,470
that instrument your system and
let you monitor its behavior over time.

76
00:05:35,470 --> 00:05:38,200
Android provides a number
of these monitoring tools

77
00:05:38,200 --> 00:05:41,740
in its Dalvik Debug Monitor Service,
or DDMS.

78
00:05:41,740 --> 00:05:47,380
Now today I'll talk about
just four of these tools.

79
00:05:47,380 --> 00:05:52,560
The file explorer, for
viewing a devices file system, logcat, for

80
00:05:52,560 --> 00:05:57,580
logging and displaying runtime events,
traceview for displaying method

81
00:05:57,580 --> 00:06:03,570
execution traces and the hierarchy viewer
for examining user interface layouts.

82
00:06:03,570 --> 00:06:07,827
Let's look at these tools and
see how you can access them from the IDE.

83
00:06:12,837 --> 00:06:17,760
First let's start the device monitor,
which exposes a number of panes and

84
00:06:17,760 --> 00:06:21,240
buttons for accessing the DDMS tools.

85
00:06:21,240 --> 00:06:23,340
Now here you can see a devices pane.

86
00:06:23,340 --> 00:06:26,600
That shows the devices that
are currently connected and

87
00:06:26,600 --> 00:06:30,820
shows a list of processes
running on those devices.

88
00:06:30,820 --> 00:06:34,270
The first tool we'll look at,
is the file explorer.

89
00:06:34,270 --> 00:06:38,930
This view shows you the files on
the selected devices file system.

90
00:06:38,930 --> 00:06:45,010
For example, here we see that this device
has a slash data, slash data directory,

91
00:06:45,010 --> 00:06:47,790
in which applications typically
store persistent data.

92
00:06:48,900 --> 00:06:54,150
This device also has an external memory
card mounted under slash storage,

93
00:06:54,150 --> 00:06:55,280
slash SD card.

94
00:06:55,280 --> 00:06:58,320
And there are some standard
directories there for

95
00:06:58,320 --> 00:07:01,170
storing music, and
movies, and other things.

96
00:07:03,370 --> 00:07:06,090
The next tool I'll talk
about shows the logcat view.

97
00:07:07,160 --> 00:07:09,160
Android logs many events by default.

98
00:07:10,550 --> 00:07:12,530
And that is, as the software runs,

99
00:07:12,530 --> 00:07:17,750
it spits out information about the things
that are happening on the device.

100
00:07:17,750 --> 00:07:21,917
And this information is stored and
can be displayed in the logcat view.

101
00:07:23,030 --> 00:07:27,824
Android also provides methods that let
developers log their own information.

102
00:07:29,843 --> 00:07:32,570
Another tool is called traceview.

103
00:07:32,570 --> 00:07:36,420
Traceview allows you to trace
the methods your application calls.

104
00:07:37,960 --> 00:07:41,320
Let's do this for the anstrap
application I showed you earlier.

105
00:07:41,320 --> 00:07:43,480
So this is the source code for
the application.

106
00:07:44,960 --> 00:07:50,200
To simplify my demonstration I'll first
put a breakpoint in the onCreate method.

107
00:07:50,200 --> 00:07:51,977
And now I'll start debugging it.

108
00:08:02,817 --> 00:08:06,290
As you can see,
it stopped at the breakpoint.

109
00:08:06,290 --> 00:08:11,169
And now when I start profiling,
so I'll open the DDMS

110
00:08:11,169 --> 00:08:16,280
tool window by typing Cmd+6,
or Alt+6 in Windows.

111
00:08:16,280 --> 00:08:18,920
And then I'll click on the button
that shows a clock and

112
00:08:18,920 --> 00:08:21,690
displays the text, Start Method Tracing.

113
00:08:22,960 --> 00:08:26,120
Now I'll return to the debug view,
and resume the application.

114
00:08:27,510 --> 00:08:32,840
I want to program run for a while, and
now, I'll return back to the DDMS tool

115
00:08:32,840 --> 00:08:38,140
window, and press that same button, but
this time, stop the method profiling.

116
00:08:39,760 --> 00:08:43,623
And this point, traceview will
process the trace information, and

117
00:08:43,623 --> 00:08:45,160
show it to me graphically.

118
00:08:46,830 --> 00:08:49,340
The traceview display has two panels.

119
00:08:49,340 --> 00:08:54,437
One is a timeline view showing
the method call stack across time.

120
00:09:17,783 --> 00:09:20,694
The other is a textual
view which shows execution

121
00:09:20,694 --> 00:09:24,315
statistics such as the number
of times a method was called and

122
00:09:24,315 --> 00:09:29,143
the amount of time spent exclusively in
that method, and the amount of time spent

123
00:09:29,143 --> 00:09:33,920
in that method including any time spent
in methods called from the current one.

124
00:09:35,260 --> 00:09:36,760
Additionally, you can search for

125
00:09:36,760 --> 00:09:41,470
a particular method by typing Cmd+F or
Ctrl+F.

126
00:09:41,470 --> 00:09:44,110
For instance, let's search for
our old friend, findAnswer.

127
00:09:45,920 --> 00:09:48,450
Now here I'll start to type in its name.

128
00:09:48,450 --> 00:09:53,041
And you can see that the methods are
filtered until only findAnswer is left.

129
00:09:54,250 --> 00:09:58,816
And now I can zoom and pan on
the timeline to see more information, and

130
00:09:58,816 --> 00:10:00,410
surrounding context.

131
00:10:07,497 --> 00:10:11,720
The last tool I'll talk about
is the UI hierarchy viewer.

132
00:10:11,720 --> 00:10:15,390
This tool allows you to examine your
application's user interface and

133
00:10:15,390 --> 00:10:16,910
see how it's organized.

134
00:10:16,910 --> 00:10:20,080
For example, let's look again at
the Hello Android application.

135
00:10:22,040 --> 00:10:25,573
First, let's run
the Hello Android application.

136
00:10:30,890 --> 00:10:33,788
Once it's up and running,
go to the menu bar, and

137
00:10:33,788 --> 00:10:36,410
click on the Android
device monitor window.

138
00:10:42,940 --> 00:10:44,560
And this will bring up the device monitor.

139
00:10:46,510 --> 00:10:47,370
And at this point,

140
00:10:47,370 --> 00:10:50,870
you can select the device on
which the application is running.

141
00:10:50,870 --> 00:10:54,560
And then click on the Window
> Open Perspective, and

142
00:10:54,560 --> 00:10:58,090
then Hierarchy View,
to open a hierarchy viewer.

143
00:11:00,470 --> 00:11:03,375
Go to the Windows panel and

144
00:11:03,375 --> 00:11:08,340
double-click the entry corresponding to,
to the Hello Android application.

145
00:11:08,340 --> 00:11:10,830
And it's the one that has
the words Hello Android in it.

146
00:11:10,830 --> 00:11:15,790
Now double-clicking on this entry
should bring up a graphical

147
00:11:15,790 --> 00:11:19,820
representation of
Hello Android's user interface.

148
00:11:19,820 --> 00:11:23,260
Which like most user interfaces
is organized as a tree.

149
00:11:24,840 --> 00:11:25,600
For instance,

150
00:11:25,600 --> 00:11:29,870
there's an outer most application window
which holds the entire user interface.

151
00:11:30,940 --> 00:11:32,170
And it contains two children.

152
00:11:32,170 --> 00:11:35,278
A title or action bar.

153
00:11:37,860 --> 00:11:42,168
And then the larger tangular body
where the application is seen,

154
00:11:42,168 --> 00:11:46,070
each of these in turn,
contain further elements.

155
00:11:46,070 --> 00:11:48,880
So let's look at some of these,
some of these other elements.

156
00:11:50,290 --> 00:11:54,989
When I click on the outer most window,
I see what that entire window looks like,

157
00:11:56,420 --> 00:11:59,450
and I can inspect detailed
information about it.

158
00:11:59,450 --> 00:12:03,840
Such as its layout parameters, which
shows for example how big the window is,

159
00:12:03,840 --> 00:12:04,580
in pixels.

160
00:12:07,800 --> 00:12:12,427
The region occupied by each element is
shown in a layout view in the bottom right

161
00:12:12,427 --> 00:12:12,998
corner.

162
00:12:16,463 --> 00:12:19,716
Now, for instance, I can see this
information for the title bar.

163
00:12:24,476 --> 00:12:27,912
And I can see the same information for
the body.

164
00:12:39,917 --> 00:12:42,841
And for the text view it contains.

